// Code generated by protoc-gen-gogo. DO NOT EDIT.
// source: message/proto/protos.proto

package message

import (
	fmt "fmt"
	proto "github.com/gogo/protobuf/proto"
	io "io"
	math "math"
	math_bits "math/bits"
	proto1 "bidder/model/proto"
	reflect "reflect"
	strings "strings"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.GoGoProtoPackageIsVersion3 // please upgrade the proto package

type Bid struct {
	LotNumber int32  `protobuf:"varint,1,opt,name=lot_number,json=lotNumber,proto3" json:"lot_number,omitempty"`
	User      string `protobuf:"bytes,2,opt,name=user,proto3" json:"user,omitempty"`
	Amount    int64  `protobuf:"varint,3,opt,name=amount,proto3" json:"amount,omitempty"`
}

func (m *Bid) Reset()      { *m = Bid{} }
func (*Bid) ProtoMessage() {}
func (*Bid) Descriptor() ([]byte, []int) {
	return fileDescriptor_3722887da46b2e9c, []int{0}
}
func (m *Bid) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *Bid) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_Bid.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *Bid) XXX_Merge(src proto.Message) {
	xxx_messageInfo_Bid.Merge(m, src)
}
func (m *Bid) XXX_Size() int {
	return m.Size()
}
func (m *Bid) XXX_DiscardUnknown() {
	xxx_messageInfo_Bid.DiscardUnknown(m)
}

var xxx_messageInfo_Bid proto.InternalMessageInfo

func (m *Bid) GetLotNumber() int32 {
	if m != nil {
		return m.LotNumber
	}
	return 0
}

func (m *Bid) GetUser() string {
	if m != nil {
		return m.User
	}
	return ""
}

func (m *Bid) GetAmount() int64 {
	if m != nil {
		return m.Amount
	}
	return 0
}

type CreateAuctionRequest struct {
	NumberOfLots int32 `protobuf:"varint,1,opt,name=number_of_lots,json=numberOfLots,proto3" json:"number_of_lots,omitempty"`
}

func (m *CreateAuctionRequest) Reset()      { *m = CreateAuctionRequest{} }
func (*CreateAuctionRequest) ProtoMessage() {}
func (*CreateAuctionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3722887da46b2e9c, []int{1}
}
func (m *CreateAuctionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAuctionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAuctionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAuctionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAuctionRequest.Merge(m, src)
}
func (m *CreateAuctionRequest) XXX_Size() int {
	return m.Size()
}
func (m *CreateAuctionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAuctionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAuctionRequest proto.InternalMessageInfo

func (m *CreateAuctionRequest) GetNumberOfLots() int32 {
	if m != nil {
		return m.NumberOfLots
	}
	return 0
}

type CreateAuctionResponse struct {
	Auction *proto1.Auction `protobuf:"bytes,1,opt,name=auction,proto3" json:"auction,omitempty"`
}

func (m *CreateAuctionResponse) Reset()      { *m = CreateAuctionResponse{} }
func (*CreateAuctionResponse) ProtoMessage() {}
func (*CreateAuctionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3722887da46b2e9c, []int{2}
}
func (m *CreateAuctionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *CreateAuctionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_CreateAuctionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *CreateAuctionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_CreateAuctionResponse.Merge(m, src)
}
func (m *CreateAuctionResponse) XXX_Size() int {
	return m.Size()
}
func (m *CreateAuctionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_CreateAuctionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_CreateAuctionResponse proto.InternalMessageInfo

func (m *CreateAuctionResponse) GetAuction() *proto1.Auction {
	if m != nil {
		return m.Auction
	}
	return nil
}

type GetAuctionRequest struct {
}

func (m *GetAuctionRequest) Reset()      { *m = GetAuctionRequest{} }
func (*GetAuctionRequest) ProtoMessage() {}
func (*GetAuctionRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3722887da46b2e9c, []int{3}
}
func (m *GetAuctionRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAuctionRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAuctionRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAuctionRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAuctionRequest.Merge(m, src)
}
func (m *GetAuctionRequest) XXX_Size() int {
	return m.Size()
}
func (m *GetAuctionRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAuctionRequest.DiscardUnknown(m)
}

var xxx_messageInfo_GetAuctionRequest proto.InternalMessageInfo

type GetAuctionResponse struct {
	Auction *proto1.Auction `protobuf:"bytes,1,opt,name=auction,proto3" json:"auction,omitempty"`
}

func (m *GetAuctionResponse) Reset()      { *m = GetAuctionResponse{} }
func (*GetAuctionResponse) ProtoMessage() {}
func (*GetAuctionResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3722887da46b2e9c, []int{4}
}
func (m *GetAuctionResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *GetAuctionResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_GetAuctionResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *GetAuctionResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_GetAuctionResponse.Merge(m, src)
}
func (m *GetAuctionResponse) XXX_Size() int {
	return m.Size()
}
func (m *GetAuctionResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_GetAuctionResponse.DiscardUnknown(m)
}

var xxx_messageInfo_GetAuctionResponse proto.InternalMessageInfo

func (m *GetAuctionResponse) GetAuction() *proto1.Auction {
	if m != nil {
		return m.Auction
	}
	return nil
}

type BidOnLotRequest struct {
	Bid *Bid `protobuf:"bytes,2,opt,name=bid,proto3" json:"bid,omitempty"`
}

func (m *BidOnLotRequest) Reset()      { *m = BidOnLotRequest{} }
func (*BidOnLotRequest) ProtoMessage() {}
func (*BidOnLotRequest) Descriptor() ([]byte, []int) {
	return fileDescriptor_3722887da46b2e9c, []int{5}
}
func (m *BidOnLotRequest) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BidOnLotRequest) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BidOnLotRequest.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BidOnLotRequest) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BidOnLotRequest.Merge(m, src)
}
func (m *BidOnLotRequest) XXX_Size() int {
	return m.Size()
}
func (m *BidOnLotRequest) XXX_DiscardUnknown() {
	xxx_messageInfo_BidOnLotRequest.DiscardUnknown(m)
}

var xxx_messageInfo_BidOnLotRequest proto.InternalMessageInfo

func (m *BidOnLotRequest) GetBid() *Bid {
	if m != nil {
		return m.Bid
	}
	return nil
}

type BidOnLotResponse struct {
	BidWithYou bool `protobuf:"varint,1,opt,name=bid_with_you,json=bidWithYou,proto3" json:"bid_with_you,omitempty"`
}

func (m *BidOnLotResponse) Reset()      { *m = BidOnLotResponse{} }
func (*BidOnLotResponse) ProtoMessage() {}
func (*BidOnLotResponse) Descriptor() ([]byte, []int) {
	return fileDescriptor_3722887da46b2e9c, []int{6}
}
func (m *BidOnLotResponse) XXX_Unmarshal(b []byte) error {
	return m.Unmarshal(b)
}
func (m *BidOnLotResponse) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	if deterministic {
		return xxx_messageInfo_BidOnLotResponse.Marshal(b, m, deterministic)
	} else {
		b = b[:cap(b)]
		n, err := m.MarshalToSizedBuffer(b)
		if err != nil {
			return nil, err
		}
		return b[:n], nil
	}
}
func (m *BidOnLotResponse) XXX_Merge(src proto.Message) {
	xxx_messageInfo_BidOnLotResponse.Merge(m, src)
}
func (m *BidOnLotResponse) XXX_Size() int {
	return m.Size()
}
func (m *BidOnLotResponse) XXX_DiscardUnknown() {
	xxx_messageInfo_BidOnLotResponse.DiscardUnknown(m)
}

var xxx_messageInfo_BidOnLotResponse proto.InternalMessageInfo

func (m *BidOnLotResponse) GetBidWithYou() bool {
	if m != nil {
		return m.BidWithYou
	}
	return false
}

func init() {
	proto.RegisterType((*Bid)(nil), "message.Bid")
	proto.RegisterType((*CreateAuctionRequest)(nil), "message.CreateAuctionRequest")
	proto.RegisterType((*CreateAuctionResponse)(nil), "message.CreateAuctionResponse")
	proto.RegisterType((*GetAuctionRequest)(nil), "message.GetAuctionRequest")
	proto.RegisterType((*GetAuctionResponse)(nil), "message.GetAuctionResponse")
	proto.RegisterType((*BidOnLotRequest)(nil), "message.BidOnLotRequest")
	proto.RegisterType((*BidOnLotResponse)(nil), "message.BidOnLotResponse")
}

func init() { proto.RegisterFile("message/proto/protos.proto", fileDescriptor_3722887da46b2e9c) }

var fileDescriptor_3722887da46b2e9c = []byte{
	// 413 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x94, 0x52, 0xbd, 0xae, 0xd3, 0x30,
	0x18, 0x8d, 0x09, 0xdc, 0xde, 0xfb, 0xb5, 0x14, 0x30, 0x3f, 0x0a, 0x41, 0xb5, 0xa2, 0x88, 0x21,
	0x53, 0x10, 0xa5, 0x23, 0x42, 0x6a, 0x18, 0xba, 0x54, 0xb4, 0xca, 0x82, 0x98, 0xa2, 0x84, 0xb8,
	0xd4, 0x52, 0x12, 0x97, 0xd8, 0x11, 0x62, 0xe3, 0x11, 0x78, 0x0c, 0x1e, 0x85, 0xb1, 0x63, 0x47,
	0x9a, 0x0e, 0x30, 0xf6, 0x11, 0x10, 0x4e, 0xd2, 0x1f, 0x08, 0xc3, 0x5d, 0x12, 0xfb, 0x9c, 0xef,
	0x3b, 0x47, 0xe7, 0xc8, 0x60, 0xa6, 0x54, 0x88, 0xf0, 0x03, 0x7d, 0xb6, 0xca, 0xb9, 0xe4, 0xd5,
	0x57, 0xb8, 0xea, 0x87, 0x3b, 0x35, 0x67, 0x1a, 0x29, 0x8f, 0x69, 0xd2, 0x32, 0x62, 0xcf, 0x41,
	0xf7, 0x58, 0x8c, 0x07, 0x00, 0x09, 0x97, 0x41, 0x56, 0xa4, 0x11, 0xcd, 0x0d, 0x64, 0x21, 0xe7,
	0x96, 0x7f, 0x95, 0x70, 0xf9, 0x46, 0x01, 0x18, 0xc3, 0xcd, 0x42, 0xd0, 0xdc, 0xb8, 0x61, 0x21,
	0xe7, 0xca, 0x57, 0x67, 0xfc, 0x08, 0x2e, 0xc2, 0x94, 0x17, 0x99, 0x34, 0x74, 0x0b, 0x39, 0xba,
	0x5f, 0xdf, 0xec, 0x97, 0xf0, 0xe0, 0x75, 0x4e, 0x43, 0x49, 0xc7, 0xc5, 0x7b, 0xc9, 0x78, 0xe6,
	0xd3, 0x8f, 0x05, 0x15, 0x12, 0x3f, 0x85, 0x7e, 0x25, 0x1f, 0xf0, 0x45, 0x90, 0x70, 0x29, 0x6a,
	0x9b, 0x5e, 0x85, 0xce, 0x16, 0x53, 0x2e, 0x85, 0x3d, 0x86, 0x87, 0x7f, 0x6d, 0x8b, 0x15, 0xcf,
	0x04, 0xc5, 0x0e, 0x74, 0xc2, 0x0a, 0x52, 0x7b, 0xdd, 0x61, 0xdf, 0x55, 0xa1, 0xdc, 0x66, 0xb0,
	0xa1, 0xed, 0xfb, 0x70, 0x6f, 0x42, 0xe5, 0xb9, 0xbb, 0xfd, 0x0a, 0xf0, 0x29, 0x78, 0x6d, 0xd1,
	0xe7, 0x70, 0xc7, 0x63, 0xf1, 0x2c, 0x9b, 0x72, 0xd9, 0x04, 0x22, 0xa0, 0x47, 0x2c, 0x56, 0x9d,
	0x74, 0x87, 0x3d, 0xb7, 0xee, 0xda, 0xf5, 0x58, 0xec, 0xff, 0x21, 0xec, 0x11, 0xdc, 0x3d, 0xae,
	0xd4, 0x86, 0x16, 0xf4, 0x22, 0x16, 0x07, 0x9f, 0x98, 0x5c, 0x06, 0x9f, 0x79, 0xa1, 0x5c, 0x2f,
	0x7d, 0x88, 0x58, 0xfc, 0x96, 0xc9, 0xe5, 0x3b, 0x5e, 0x0c, 0x7f, 0x22, 0xe8, 0xd4, 0xee, 0x78,
	0x0e, 0xb7, 0xcf, 0xca, 0xc0, 0x83, 0x83, 0x4b, 0x5b, 0xc5, 0x26, 0xf9, 0x1f, 0x5d, 0xb9, 0xdb,
	0x1a, 0x9e, 0x00, 0x1c, 0x6b, 0xc0, 0xe6, 0x61, 0xfe, 0x9f, 0xc2, 0xcc, 0x27, 0xad, 0xdc, 0x41,
	0x68, 0x0c, 0x97, 0x4d, 0x38, 0x6c, 0x9c, 0x66, 0x3f, 0xad, 0xc8, 0x7c, 0xdc, 0xc2, 0x34, 0x12,
	0xde, 0x68, 0xbd, 0x25, 0xda, 0x66, 0x4b, 0xb4, 0xfd, 0x96, 0xa0, 0x2f, 0x25, 0x41, 0xdf, 0x4a,
	0x82, 0xbe, 0x97, 0x04, 0xad, 0x4b, 0x82, 0x7e, 0x94, 0x04, 0xfd, 0x2a, 0x89, 0xb6, 0x2f, 0x09,
	0xfa, 0xba, 0x23, 0xda, 0x7a, 0x47, 0xb4, 0xcd, 0x8e, 0x68, 0xd1, 0x85, 0x7a, 0xb7, 0x2f, 0x7e,
	0x07, 0x00, 0x00, 0xff, 0xff, 0x79, 0xae, 0x62, 0x16, 0xf8, 0x02, 0x00, 0x00,
}

func (this *Bid) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*Bid)
	if !ok {
		that2, ok := that.(Bid)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.LotNumber != that1.LotNumber {
		return false
	}
	if this.User != that1.User {
		return false
	}
	if this.Amount != that1.Amount {
		return false
	}
	return true
}
func (this *CreateAuctionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateAuctionRequest)
	if !ok {
		that2, ok := that.(CreateAuctionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.NumberOfLots != that1.NumberOfLots {
		return false
	}
	return true
}
func (this *CreateAuctionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*CreateAuctionResponse)
	if !ok {
		that2, ok := that.(CreateAuctionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Auction.Equal(that1.Auction) {
		return false
	}
	return true
}
func (this *GetAuctionRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAuctionRequest)
	if !ok {
		that2, ok := that.(GetAuctionRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	return true
}
func (this *GetAuctionResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*GetAuctionResponse)
	if !ok {
		that2, ok := that.(GetAuctionResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Auction.Equal(that1.Auction) {
		return false
	}
	return true
}
func (this *BidOnLotRequest) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BidOnLotRequest)
	if !ok {
		that2, ok := that.(BidOnLotRequest)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if !this.Bid.Equal(that1.Bid) {
		return false
	}
	return true
}
func (this *BidOnLotResponse) Equal(that interface{}) bool {
	if that == nil {
		return this == nil
	}

	that1, ok := that.(*BidOnLotResponse)
	if !ok {
		that2, ok := that.(BidOnLotResponse)
		if ok {
			that1 = &that2
		} else {
			return false
		}
	}
	if that1 == nil {
		return this == nil
	} else if this == nil {
		return false
	}
	if this.BidWithYou != that1.BidWithYou {
		return false
	}
	return true
}
func (this *Bid) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 7)
	s = append(s, "&message.Bid{")
	s = append(s, "LotNumber: "+fmt.Sprintf("%#v", this.LotNumber)+",\n")
	s = append(s, "User: "+fmt.Sprintf("%#v", this.User)+",\n")
	s = append(s, "Amount: "+fmt.Sprintf("%#v", this.Amount)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateAuctionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&message.CreateAuctionRequest{")
	s = append(s, "NumberOfLots: "+fmt.Sprintf("%#v", this.NumberOfLots)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *CreateAuctionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&message.CreateAuctionResponse{")
	if this.Auction != nil {
		s = append(s, "Auction: "+fmt.Sprintf("%#v", this.Auction)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAuctionRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 4)
	s = append(s, "&message.GetAuctionRequest{")
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *GetAuctionResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&message.GetAuctionResponse{")
	if this.Auction != nil {
		s = append(s, "Auction: "+fmt.Sprintf("%#v", this.Auction)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BidOnLotRequest) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&message.BidOnLotRequest{")
	if this.Bid != nil {
		s = append(s, "Bid: "+fmt.Sprintf("%#v", this.Bid)+",\n")
	}
	s = append(s, "}")
	return strings.Join(s, "")
}
func (this *BidOnLotResponse) GoString() string {
	if this == nil {
		return "nil"
	}
	s := make([]string, 0, 5)
	s = append(s, "&message.BidOnLotResponse{")
	s = append(s, "BidWithYou: "+fmt.Sprintf("%#v", this.BidWithYou)+",\n")
	s = append(s, "}")
	return strings.Join(s, "")
}
func valueToGoStringProtos(v interface{}, typ string) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("func(v %v) *%v { return &v } ( %#v )", typ, typ, pv)
}
func (m *Bid) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *Bid) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *Bid) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Amount != 0 {
		i = encodeVarintProtos(dAtA, i, uint64(m.Amount))
		i--
		dAtA[i] = 0x18
	}
	if len(m.User) > 0 {
		i -= len(m.User)
		copy(dAtA[i:], m.User)
		i = encodeVarintProtos(dAtA, i, uint64(len(m.User)))
		i--
		dAtA[i] = 0x12
	}
	if m.LotNumber != 0 {
		i = encodeVarintProtos(dAtA, i, uint64(m.LotNumber))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateAuctionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAuctionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateAuctionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.NumberOfLots != 0 {
		i = encodeVarintProtos(dAtA, i, uint64(m.NumberOfLots))
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func (m *CreateAuctionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *CreateAuctionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *CreateAuctionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Auction != nil {
		{
			size, err := m.Auction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtos(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *GetAuctionRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuctionRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAuctionRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	return len(dAtA) - i, nil
}

func (m *GetAuctionResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *GetAuctionResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *GetAuctionResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Auction != nil {
		{
			size, err := m.Auction.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtos(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0xa
	}
	return len(dAtA) - i, nil
}

func (m *BidOnLotRequest) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BidOnLotRequest) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BidOnLotRequest) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.Bid != nil {
		{
			size, err := m.Bid.MarshalToSizedBuffer(dAtA[:i])
			if err != nil {
				return 0, err
			}
			i -= size
			i = encodeVarintProtos(dAtA, i, uint64(size))
		}
		i--
		dAtA[i] = 0x12
	}
	return len(dAtA) - i, nil
}

func (m *BidOnLotResponse) Marshal() (dAtA []byte, err error) {
	size := m.Size()
	dAtA = make([]byte, size)
	n, err := m.MarshalToSizedBuffer(dAtA[:size])
	if err != nil {
		return nil, err
	}
	return dAtA[:n], nil
}

func (m *BidOnLotResponse) MarshalTo(dAtA []byte) (int, error) {
	size := m.Size()
	return m.MarshalToSizedBuffer(dAtA[:size])
}

func (m *BidOnLotResponse) MarshalToSizedBuffer(dAtA []byte) (int, error) {
	i := len(dAtA)
	_ = i
	var l int
	_ = l
	if m.BidWithYou {
		i--
		if m.BidWithYou {
			dAtA[i] = 1
		} else {
			dAtA[i] = 0
		}
		i--
		dAtA[i] = 0x8
	}
	return len(dAtA) - i, nil
}

func encodeVarintProtos(dAtA []byte, offset int, v uint64) int {
	offset -= sovProtos(v)
	base := offset
	for v >= 1<<7 {
		dAtA[offset] = uint8(v&0x7f | 0x80)
		v >>= 7
		offset++
	}
	dAtA[offset] = uint8(v)
	return base
}
func (m *Bid) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.LotNumber != 0 {
		n += 1 + sovProtos(uint64(m.LotNumber))
	}
	l = len(m.User)
	if l > 0 {
		n += 1 + l + sovProtos(uint64(l))
	}
	if m.Amount != 0 {
		n += 1 + sovProtos(uint64(m.Amount))
	}
	return n
}

func (m *CreateAuctionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.NumberOfLots != 0 {
		n += 1 + sovProtos(uint64(m.NumberOfLots))
	}
	return n
}

func (m *CreateAuctionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Auction != nil {
		l = m.Auction.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *GetAuctionRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	return n
}

func (m *GetAuctionResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Auction != nil {
		l = m.Auction.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *BidOnLotRequest) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.Bid != nil {
		l = m.Bid.Size()
		n += 1 + l + sovProtos(uint64(l))
	}
	return n
}

func (m *BidOnLotResponse) Size() (n int) {
	if m == nil {
		return 0
	}
	var l int
	_ = l
	if m.BidWithYou {
		n += 2
	}
	return n
}

func sovProtos(x uint64) (n int) {
	return (math_bits.Len64(x|1) + 6) / 7
}
func sozProtos(x uint64) (n int) {
	return sovProtos(uint64((x << 1) ^ uint64((int64(x) >> 63))))
}
func (this *Bid) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&Bid{`,
		`LotNumber:` + fmt.Sprintf("%v", this.LotNumber) + `,`,
		`User:` + fmt.Sprintf("%v", this.User) + `,`,
		`Amount:` + fmt.Sprintf("%v", this.Amount) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateAuctionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateAuctionRequest{`,
		`NumberOfLots:` + fmt.Sprintf("%v", this.NumberOfLots) + `,`,
		`}`,
	}, "")
	return s
}
func (this *CreateAuctionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&CreateAuctionResponse{`,
		`Auction:` + strings.Replace(fmt.Sprintf("%v", this.Auction), "Auction", "proto1.Auction", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *GetAuctionRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAuctionRequest{`,
		`}`,
	}, "")
	return s
}
func (this *GetAuctionResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&GetAuctionResponse{`,
		`Auction:` + strings.Replace(fmt.Sprintf("%v", this.Auction), "Auction", "proto1.Auction", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BidOnLotRequest) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BidOnLotRequest{`,
		`Bid:` + strings.Replace(this.Bid.String(), "Bid", "Bid", 1) + `,`,
		`}`,
	}, "")
	return s
}
func (this *BidOnLotResponse) String() string {
	if this == nil {
		return "nil"
	}
	s := strings.Join([]string{`&BidOnLotResponse{`,
		`BidWithYou:` + fmt.Sprintf("%v", this.BidWithYou) + `,`,
		`}`,
	}, "")
	return s
}
func valueToStringProtos(v interface{}) string {
	rv := reflect.ValueOf(v)
	if rv.IsNil() {
		return "nil"
	}
	pv := reflect.Indirect(rv).Interface()
	return fmt.Sprintf("*%v", pv)
}
func (m *Bid) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: Bid: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: Bid: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field LotNumber", wireType)
			}
			m.LotNumber = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.LotNumber |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field User", wireType)
			}
			var stringLen uint64
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				stringLen |= uint64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			intStringLen := int(stringLen)
			if intStringLen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + intStringLen
			if postIndex < 0 {
				return ErrInvalidLengthProtos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			m.User = string(dAtA[iNdEx:postIndex])
			iNdEx = postIndex
		case 3:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field Amount", wireType)
			}
			m.Amount = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.Amount |= int64(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAuctionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAuctionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAuctionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field NumberOfLots", wireType)
			}
			m.NumberOfLots = 0
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				m.NumberOfLots |= int32(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *CreateAuctionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: CreateAuctionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: CreateAuctionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auction == nil {
				m.Auction = &proto1.Auction{}
			}
			if err := m.Auction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuctionRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuctionRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuctionRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *GetAuctionResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: GetAuctionResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: GetAuctionResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Auction", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Auction == nil {
				m.Auction = &proto1.Auction{}
			}
			if err := m.Auction.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BidOnLotRequest) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BidOnLotRequest: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BidOnLotRequest: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 2:
			if wireType != 2 {
				return fmt.Errorf("proto: wrong wireType = %d for field Bid", wireType)
			}
			var msglen int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				msglen |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if msglen < 0 {
				return ErrInvalidLengthProtos
			}
			postIndex := iNdEx + msglen
			if postIndex < 0 {
				return ErrInvalidLengthProtos
			}
			if postIndex > l {
				return io.ErrUnexpectedEOF
			}
			if m.Bid == nil {
				m.Bid = &Bid{}
			}
			if err := m.Bid.Unmarshal(dAtA[iNdEx:postIndex]); err != nil {
				return err
			}
			iNdEx = postIndex
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func (m *BidOnLotResponse) Unmarshal(dAtA []byte) error {
	l := len(dAtA)
	iNdEx := 0
	for iNdEx < l {
		preIndex := iNdEx
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= uint64(b&0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		fieldNum := int32(wire >> 3)
		wireType := int(wire & 0x7)
		if wireType == 4 {
			return fmt.Errorf("proto: BidOnLotResponse: wiretype end group for non-group")
		}
		if fieldNum <= 0 {
			return fmt.Errorf("proto: BidOnLotResponse: illegal tag %d (wire type %d)", fieldNum, wire)
		}
		switch fieldNum {
		case 1:
			if wireType != 0 {
				return fmt.Errorf("proto: wrong wireType = %d for field BidWithYou", wireType)
			}
			var v int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				v |= int(b&0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			m.BidWithYou = bool(v != 0)
		default:
			iNdEx = preIndex
			skippy, err := skipProtos(dAtA[iNdEx:])
			if err != nil {
				return err
			}
			if (skippy < 0) || (iNdEx+skippy) < 0 {
				return ErrInvalidLengthProtos
			}
			if (iNdEx + skippy) > l {
				return io.ErrUnexpectedEOF
			}
			iNdEx += skippy
		}
	}

	if iNdEx > l {
		return io.ErrUnexpectedEOF
	}
	return nil
}
func skipProtos(dAtA []byte) (n int, err error) {
	l := len(dAtA)
	iNdEx := 0
	depth := 0
	for iNdEx < l {
		var wire uint64
		for shift := uint(0); ; shift += 7 {
			if shift >= 64 {
				return 0, ErrIntOverflowProtos
			}
			if iNdEx >= l {
				return 0, io.ErrUnexpectedEOF
			}
			b := dAtA[iNdEx]
			iNdEx++
			wire |= (uint64(b) & 0x7F) << shift
			if b < 0x80 {
				break
			}
		}
		wireType := int(wire & 0x7)
		switch wireType {
		case 0:
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				iNdEx++
				if dAtA[iNdEx-1] < 0x80 {
					break
				}
			}
		case 1:
			iNdEx += 8
		case 2:
			var length int
			for shift := uint(0); ; shift += 7 {
				if shift >= 64 {
					return 0, ErrIntOverflowProtos
				}
				if iNdEx >= l {
					return 0, io.ErrUnexpectedEOF
				}
				b := dAtA[iNdEx]
				iNdEx++
				length |= (int(b) & 0x7F) << shift
				if b < 0x80 {
					break
				}
			}
			if length < 0 {
				return 0, ErrInvalidLengthProtos
			}
			iNdEx += length
		case 3:
			depth++
		case 4:
			if depth == 0 {
				return 0, ErrUnexpectedEndOfGroupProtos
			}
			depth--
		case 5:
			iNdEx += 4
		default:
			return 0, fmt.Errorf("proto: illegal wireType %d", wireType)
		}
		if iNdEx < 0 {
			return 0, ErrInvalidLengthProtos
		}
		if depth == 0 {
			return iNdEx, nil
		}
	}
	return 0, io.ErrUnexpectedEOF
}

var (
	ErrInvalidLengthProtos        = fmt.Errorf("proto: negative length found during unmarshaling")
	ErrIntOverflowProtos          = fmt.Errorf("proto: integer overflow")
	ErrUnexpectedEndOfGroupProtos = fmt.Errorf("proto: unexpected end of group")
)
